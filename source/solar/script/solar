#!/usr/bin/env php
<?php
/**
 * Error reporting turned way up
 */
error_reporting(E_ALL | E_STRICT);
ini_set('display_errors', true);
ini_set('html_errors', false);
$argv = empty($_SERVER['argv']) ? array(0 => '') : $_SERVER['argv'];

// get the last part of the command used to invoke this script and use as the
// vendor name.  e.g., './scripts/solar' => 'solar'
$path = explode(DIRECTORY_SEPARATOR, $argv[0]);
$vendor = end($path);

// what is the solar system root, if anywhere?
$dirs = array(
    // symlink solar
    "/source/solar/script/solar",
    // symlink vendor
    "/source/$vendor/script/$vendor",
    // copy solar
    "/script/solar",
    // copy vendor
    "/script/$vendor",
);

$system = false;
$file = __FILE__;
foreach ($dirs as $dir) {
    $len = -1 * strlen($dir);
    if (substr($file, $len) == $dir) {
        $system = substr($file, 0, $len);
        break;
    }
}

// change vendor name to a class name prefix:
// 'foo' => 'Foo'
// 'foo-bar' => 'FooBar'
// 'foo_bar' => 'FooBar'
$vendor = str_replace(array('-', '_'), ' ', $vendor);
$vendor = ucwords($vendor);
$vendor = str_replace(' ', '', $vendor);

/**
 * manually look for a --verbose flag.
 */
$verbose = false;
foreach ($argv as $val) {
    $long  = $val == '--verbose';
    $short = strlen($val) > 1   // at least 2 chars
          && $val[0] == '-'     // short option
          && $val[1] != '-'     // not long option
          && strpos($val, 'v'); // 'v' in there somewhere
    if ($long || $short) {
        // found the argument
        $verbose = true;
        break;
    }
}

/**
 * 
 * Discover and set the include-path.
 * 
 * Use the solar system root include path, fall back to the default path.
 * 
 * Override with the value of --include-path, if any.
 * 
 */
if ($system) {
    $include = "$system/include:.";
} else {
    $include = get_include_path();
}

// manually look for a --include-path argument that overrides the default
$found = false;
foreach ($argv as $val) {
    if ($val == '--include-path') {
        // found the argument
        $found = true;
        // reset the default in preparation for the next argument
        $include = false;
        continue;
    }
    
    if ($found && substr($val, 0, 1) != '-') {
        $include = $val;
        break;
    }
    
    if (substr($val, 0, 15) == '--include-path=') {
        $found = true;
        $include = substr($val, 15);
        break;
    }
}

// if there was an --include-path but no param, that's a failure
if ($found && ! $include) {
    echo "Please specify an include-path after the --include-path option." . PHP_EOL;
    exit(1);
}

set_include_path($include);
if ($verbose) {
    echo "Using include_path '" . get_include_path() . "'." . PHP_EOL;
}


/**
 * 
 * Discover the config file.
 * 
 * Override with the value of --config, if any.
 * 
 */
if ($system) {
    $config = "$system/config.php";
} else {
    $config = false;
}

// manually look for a --config argument that overrides the default
$found = false;
foreach ($argv as $val) {
    if ($val == '--config') {
        // found the argument
        $found = true;
        // reset the default in preparation for the next argument
        $config = false;
        continue;
    }
    
    if ($found && substr($val, 0, 1) != '-') {
        $config = $val;
        break;
    }
    
    if (substr($val, 0, 9) == '--config=') {
        $found = true;
        $config = substr($val, 9);
        break;
    }
}

// if there was a --config but no param, that's a failure
if ($found && ! $config) {
    echo "Please specify a config file path after the --config option." . PHP_EOL;
    exit(1);
}

// was there a config file at all?
if ($config) {
    $config = realpath($config);
    $text = "Using config file '$config'." . PHP_EOL;
} else {
    $text = "Not using a config file." . PHP_EOL;
}

if ($verbose) {
    echo $text;
}

/**
 * Main
 */

// Start Solar with the requested config file (if any)
require 'Solar.php';
Solar::start($config);

// is there a config for the console?
if (Solar_Config::get('Solar_Controller_Console')) {
    
    // use the config as-is and create the console
    $console = Solar::factory('Solar_Controller_Console');
    
} else {
    
    // create a config for the console
    $config = array(
        'classes' => "{$vendor}_Cli",
        'default' => 'base'
    );
    
    // create the console
    $console = Solar::factory('Solar_Controller_Console', $config);
}

// execute the requested command
try {
    
    $console->exec();
    Solar::stop();
    exit(0);
    
} catch (Exception $e) {
    
    // stop Solar
    Solar::stop();
    
    // find an exit code, if any
    $exit = false;
    if ($e instanceof Solar_Exception) {
        $info = $e->getInfo();
        if (array_key_exists('exit', $info)) {
            $exit = (int) $info['exit'];
        }
    }
    
    // disallow empty or zero exit codes
    if (! $exit) {
        $exit = 1;
    }
    
    // how to print the exception message?
    switch (true) {
        
    case $e instanceof Solar_Controller_Command_Exception_InvalidOptions:
        echo $e->getMessageInvalid();
        break;
    
    case $e instanceof Solar_Controller_Console_Exception:
        echo $e->getMessage();
        break;
    
    case $e instanceof Solar_Exception:
        if ($verbose || $e->getCode() == $e->getMessage()) {
            echo $e;
        } else {
            echo $e->getMessage();
        }
        break;
        
    default:
        echo $e;
    }
    
    echo PHP_EOL;
    exit((int) $exit);
}
